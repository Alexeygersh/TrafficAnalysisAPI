// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrafficAnalysisAPI.Data;

#nullable disable

namespace TrafficAnalysisAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251019185818_InitialCreateHash")]
    partial class InitialCreateHash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrafficAnalysisAPI.Models.NetworkPacket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DestinationIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("PacketSize")
                        .HasColumnType("integer");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceIP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinationIP");

                    b.HasIndex("SessionId");

                    b.HasIndex("SourceIP");

                    b.HasIndex("Timestamp");

                    b.ToTable("NetworkPackets");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.TrafficAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsMalicious")
                        .HasColumnType("boolean");

                    b.Property<double>("MLModelScore")
                        .HasColumnType("double precision");

                    b.Property<int>("PacketId")
                        .HasColumnType("integer");

                    b.Property<string>("ThreatLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("PacketId")
                        .IsUnique();

                    b.HasIndex("ThreatLevel");

                    b.ToTable("TrafficAnalyses");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.TrafficSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TrafficSessions");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$12$C83vSlJeLDe9HQKCTtAZauTtlT2s8sVbZtZIvGAmlrAR14wDDRkE.",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PasswordHash = "$2a$12$uMJ6PYfgWhWPNFTshq.o1uukT0yYAuju3J6mVv1M32MXtrFhpnYB2",
                            Role = "Analyst",
                            Username = "analyst"
                        });
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.NetworkPacket", b =>
                {
                    b.HasOne("TrafficAnalysisAPI.Models.TrafficSession", "Session")
                        .WithMany("Packets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Session");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.TrafficAnalysis", b =>
                {
                    b.HasOne("TrafficAnalysisAPI.Models.NetworkPacket", "Packet")
                        .WithOne("Analysis")
                        .HasForeignKey("TrafficAnalysisAPI.Models.TrafficAnalysis", "PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.NetworkPacket", b =>
                {
                    b.Navigation("Analysis");
                });

            modelBuilder.Entity("TrafficAnalysisAPI.Models.TrafficSession", b =>
                {
                    b.Navigation("Packets");
                });
#pragma warning restore 612, 618
        }
    }
}
